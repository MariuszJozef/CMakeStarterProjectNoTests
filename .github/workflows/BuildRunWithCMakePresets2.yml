name: Build and run with CMakePresets.json 2

on:
  push: 
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  buildSingleConfig:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        preset:
        # single config generators
          - Ninja-Msvc-Debug
          - Ninja-Msvc-Release
          - Ninja-Gnu-Debug
          - Ninja-Gnu-Release
          - Ninja-Clang-Debug
          - Ninja-Clang-Release
          - NMake-Msvc-Debug
          - NMake-Msvc-Release
          - Make-Gnu-Debug
          - Make-Gnu-Release
          - Make-Clang-Debug
          - Make-Clang-Release
        exclude:
          - os: ubuntu-latest
            preset: Ninja-Msvc-Debug
          - os: ubuntu-latest
            preset: Ninja-Msvc-Release
          - os: ubuntu-latest
            preset: NMake-Msvc-Debug
          - os: ubuntu-latest
            preset: NMake-Msvc-Release

          - os: macos-latest
            preset: Ninja-Gnu-Debug
          - os: macos-latest
            preset: Ninja-Gnu-Release
          - os: macos-latest
            preset: Ninja-Msvc-Debug
          - os: macos-latest
            preset: Ninja-Msvc-Release
          - os: macos-latest
            preset: NMake-Msvc-Debug
          - os: macos-latest
            preset: NMake-Msvc-Release
          - os: macos-latest
            preset: NMake-Gnu-Debug
          - os: macos-latest
            preset: NMake-Gnu-Release

          - os: windows-latest
            preset: Ninja-Gnu-Debug
          - os: windows-latest
            preset: Ninja-Gnu-Release
          - os: windows-latest
            preset: Ninja-Clang-Debug
          - os: windows-latest
            preset: Ninja-Clang-Release
          - os: windows-latest
            preset: Make-Gnu-Debug
          - os: windows-latest
            preset: Make-Gnu-Release
          - os: windows-latest
            preset: Make-Clang-Debug
          - os: windows-latest
            preset: Make-Clang-Release
        
    runs-on: ${{matrix.os}}

    steps:
    - run: echo Platform = ${{matrix.os}}, preset = ${{matrix.preset}}

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Location of repo
      run: |
        pwd 
        ls ${{github.workspace}}
        
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup MSVC compiler
      if: ${{matrix.os == 'windows-latest'}}
      # uses: microsoft/setup-msbuild@v1.0.2
      uses: ilammy/msvc-dev-cmd@v1

    - name: MSVC compiler version
      if: ${{matrix.os == 'windows-latest'}}
      shell: bash
      run: |
        echo cl
        cl

    - name: Tool versions
      shell: bash
      run: | 
        echo g++ --version
        g++ --version
        echo 
        echo clang++ --version
        clang++ --version
        echo 
        echo cmake --version
        cmake --version
        echo 
        echo ninja --version
        ninja --version

    - name: >
        CMake configure ~ 
        platform = ${{runner.os}} ~ 
        preset = ${{matrix.preset}}
      run: cmake --preset ${{matrix.preset}}
      
    - name: >
        CMake build ~ 
        platform = ${{runner.os}} ~ 
        preset = ${{matrix.preset}}
      run: cmake --build --preset ${{matrix.preset}}

    - name: >
        CMake run ~ 
        platform = ${{runner.os}} ~ 
        preset = ${{matrix.preset}}
      run: cmake --build --preset ${{matrix.preset}} --target run

    - name: Build dir
      run: ls ${{github.workspace}}/build*
  
  buildMultiConfig:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        preset:
        # multi config generators
          - NinjaMC-Msvc
          - NinjaMC-Gnu
          - NinjaMC-Clang
          - VSx32-Msvc
          - VSx64-Msvc
          - Xcode-Clang
        build_type: [Debug, Release]
        exclude:
          - os: ubuntu-latest
            preset: NinjaMC-Msvc
          - os: ubuntu-latest
            preset: VSx32-Msvc
          - os: ubuntu-latest
            preset: VSx64-Msvc
          - os: ubuntu-latest
            preset: Xcode-Clang
            
          - os: macos-latest
            preset: NinjaMC-Gnu
          - os: macos-latest
            preset: NinjaMC-Msvc
          - os: macos-latest
            preset: NMake-Msvc
          - os: macos-latest
            preset: Make-Gnu
          - os: macos-latest
            preset: VSx32-Msvc
          - os: macos-latest
            preset: VSx64-Msvc

          - os: windows-latest
            preset: NinjaMC-Gnu
          - os: windows-latest
            preset: NinjaMC-Clang
          - os: windows-latest
            preset: Make-Gnu
          - os: windows-latest
            preset: Make-Clang
          - os: windows-latest
            preset: Xcode-Clang
        
    runs-on: ${{matrix.os}}

    steps:
    - run: echo Platform = ${{matrix.os}}, preset = ${{matrix.preset}}

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Location of repo
      run: |
        pwd 
        ls ${{github.workspace}}
        
    - name: Setup Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup MSVC compiler
      if: ${{matrix.os == 'windows-latest'}}
      # uses: microsoft/setup-msbuild@v1.0.2
      uses: ilammy/msvc-dev-cmd@v1

    - name: MSVC compiler version
      if: ${{matrix.os == 'windows-latest'}}
      shell: bash
      run: |
        echo cl
        cl

    - name: Tool versions
      shell: bash
      run: | 
        echo g++ --version
        g++ --version
        echo 
        echo clang++ --version
        clang++ --version
        echo 
        echo cmake --version
        cmake --version
        echo 
        echo ninja --version
        ninja --version

    - name: >
        CMake configure ~ 
        platform = ${{runner.os}} ~ 
        preset = ${{matrix.preset}}
      run: cmake --preset ${{matrix.preset}}
      
    - name: >
        CMake build ~ 
        platform = ${{runner.os}} ~ 
        preset = ${{matrix.preset}} ~
        build_type = ${{matrix.build_type}}
      run: cmake --build --preset ${{matrix.preset}} --config ${{matrix.build_type}}

    - name: >
        CMake run ~ 
        platform = ${{runner.os}} ~ 
        preset = ${{matrix.preset}} ~
        build_type = ${{matrix.build_type}}
      run: cmake --build --preset ${{matrix.preset}} --config ${{matrix.build_type}} --target run

    - name: Build dir
      run: ls ${{github.workspace}}/build*
